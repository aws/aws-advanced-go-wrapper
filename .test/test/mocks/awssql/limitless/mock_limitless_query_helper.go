// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/isamatha/Work/GoDriver/aws-advanced-go-wrapper/awssql/plugins/limitless/limitless_query_helper.go

// Package mock_driver_infrastructure is a generated GoMock package.
package mock_limitless

import (
	driver "database/sql/driver"
	reflect "reflect"

	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockLimitlessQueryHelper is a mock of LimitlessQueryHelper interface.
type MockLimitlessQueryHelper struct {
	ctrl     *gomock.Controller
	recorder *MockLimitlessQueryHelperMockRecorder
}

// MockLimitlessQueryHelperMockRecorder is the mock recorder for MockLimitlessQueryHelper.
type MockLimitlessQueryHelperMockRecorder struct {
	mock *MockLimitlessQueryHelper
}

// NewMockLimitlessQueryHelper creates a new mock instance.
func NewMockLimitlessQueryHelper(ctrl *gomock.Controller) *MockLimitlessQueryHelper {
	mock := &MockLimitlessQueryHelper{ctrl: ctrl}
	mock.recorder = &MockLimitlessQueryHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitlessQueryHelper) EXPECT() *MockLimitlessQueryHelperMockRecorder {
	return m.recorder
}

// QueryForLimitlessRouters mocks base method.
func (m *MockLimitlessQueryHelper) QueryForLimitlessRouters(conn driver.Conn, hostPortToMap int, props map[string]string) ([]*host_info_util.HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryForLimitlessRouters", conn, hostPortToMap, props)
	ret0, _ := ret[0].([]*host_info_util.HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryForLimitlessRouters indicates an expected call of QueryForLimitlessRouters.
func (mr *MockLimitlessQueryHelperMockRecorder) QueryForLimitlessRouters(conn, hostPortToMap, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryForLimitlessRouters", reflect.TypeOf((*MockLimitlessQueryHelper)(nil).QueryForLimitlessRouters), conn, hostPortToMap, props)
}
