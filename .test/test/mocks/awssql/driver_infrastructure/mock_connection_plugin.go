// Code generated by MockGen. DO NOT EDIT.
// Source: awssql/driver_infrastructure/connection_plugin.go

// Package mock_driver_infrastructure is a generated GoMock package.
package mock_driver_infrastructure

import (
	driver "database/sql/driver"
	reflect "reflect"

	driver_infrastructure "github.com/aws/aws-advanced-go-wrapper/awssql/driver_infrastructure"
	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionPlugin is a mock of ConnectionPlugin interface.
type MockConnectionPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPluginMockRecorder
}

// MockConnectionPluginMockRecorder is the mock recorder for MockConnectionPlugin.
type MockConnectionPluginMockRecorder struct {
	mock *MockConnectionPlugin
}

// NewMockConnectionPlugin creates a new mock instance.
func NewMockConnectionPlugin(ctrl *gomock.Controller) *MockConnectionPlugin {
	mock := &MockConnectionPlugin{ctrl: ctrl}
	mock.recorder = &MockConnectionPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPlugin) EXPECT() *MockConnectionPluginMockRecorder {
	return m.recorder
}

// AcceptsStrategy mocks base method.
func (m *MockConnectionPlugin) AcceptsStrategy(strategy string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptsStrategy", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptsStrategy indicates an expected call of AcceptsStrategy.
func (mr *MockConnectionPluginMockRecorder) AcceptsStrategy(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsStrategy", reflect.TypeOf((*MockConnectionPlugin)(nil).AcceptsStrategy), strategy)
}

// Connect mocks base method.
func (m *MockConnectionPlugin) Connect(hostInfo *host_info_util.HostInfo, props map[string]string, isInitialConnection bool, connectFunc driver_infrastructure.ConnectFunc) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", hostInfo, props, isInitialConnection, connectFunc)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectionPluginMockRecorder) Connect(hostInfo, props, isInitialConnection, connectFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionPlugin)(nil).Connect), hostInfo, props, isInitialConnection, connectFunc)
}

// Execute mocks base method.
func (m *MockConnectionPlugin) Execute(connInvokedOn driver.Conn, methodName string, executeFunc driver_infrastructure.ExecuteFunc, methodArgs ...any) (any, any, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{connInvokedOn, methodName, executeFunc}
	for _, a := range methodArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(any)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Execute indicates an expected call of Execute.
func (mr *MockConnectionPluginMockRecorder) Execute(connInvokedOn, methodName, executeFunc interface{}, methodArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{connInvokedOn, methodName, executeFunc}, methodArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockConnectionPlugin)(nil).Execute), varargs...)
}

// ForceConnect mocks base method.
func (m *MockConnectionPlugin) ForceConnect(hostInfo *host_info_util.HostInfo, props map[string]string, isInitialConnection bool, connectFunc driver_infrastructure.ConnectFunc) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceConnect", hostInfo, props, isInitialConnection, connectFunc)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceConnect indicates an expected call of ForceConnect.
func (mr *MockConnectionPluginMockRecorder) ForceConnect(hostInfo, props, isInitialConnection, connectFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceConnect", reflect.TypeOf((*MockConnectionPlugin)(nil).ForceConnect), hostInfo, props, isInitialConnection, connectFunc)
}

// GetHostInfoByStrategy mocks base method.
func (m *MockConnectionPlugin) GetHostInfoByStrategy(role host_info_util.HostRole, strategy string, hosts []*host_info_util.HostInfo) (*host_info_util.HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostInfoByStrategy", role, strategy, hosts)
	ret0, _ := ret[0].(*host_info_util.HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostInfoByStrategy indicates an expected call of GetHostInfoByStrategy.
func (mr *MockConnectionPluginMockRecorder) GetHostInfoByStrategy(role, strategy, hosts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostInfoByStrategy", reflect.TypeOf((*MockConnectionPlugin)(nil).GetHostInfoByStrategy), role, strategy, hosts)
}

// GetHostSelectorStrategy mocks base method.
func (m *MockConnectionPlugin) GetHostSelectorStrategy(strategy string) (driver_infrastructure.HostSelector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSelectorStrategy", strategy)
	ret0, _ := ret[0].(driver_infrastructure.HostSelector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSelectorStrategy indicates an expected call of GetHostSelectorStrategy.
func (mr *MockConnectionPluginMockRecorder) GetHostSelectorStrategy(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSelectorStrategy", reflect.TypeOf((*MockConnectionPlugin)(nil).GetHostSelectorStrategy), strategy)
}

// GetSubscribedMethods mocks base method.
func (m *MockConnectionPlugin) GetSubscribedMethods() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribedMethods")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSubscribedMethods indicates an expected call of GetSubscribedMethods.
func (mr *MockConnectionPluginMockRecorder) GetSubscribedMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribedMethods", reflect.TypeOf((*MockConnectionPlugin)(nil).GetSubscribedMethods))
}

// InitHostProvider mocks base method.
func (m *MockConnectionPlugin) InitHostProvider(initialUrl string, props map[string]string, hostListProviderService driver_infrastructure.HostListProviderService, initHostProviderFunc func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitHostProvider", initialUrl, props, hostListProviderService, initHostProviderFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitHostProvider indicates an expected call of InitHostProvider.
func (mr *MockConnectionPluginMockRecorder) InitHostProvider(initialUrl, props, hostListProviderService, initHostProviderFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitHostProvider", reflect.TypeOf((*MockConnectionPlugin)(nil).InitHostProvider), initialUrl, props, hostListProviderService, initHostProviderFunc)
}

// NotifyConnectionChanged mocks base method.
func (m *MockConnectionPlugin) NotifyConnectionChanged(changes map[driver_infrastructure.HostChangeOptions]bool) driver_infrastructure.OldConnectionSuggestedAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyConnectionChanged", changes)
	ret0, _ := ret[0].(driver_infrastructure.OldConnectionSuggestedAction)
	return ret0
}

// NotifyConnectionChanged indicates an expected call of NotifyConnectionChanged.
func (mr *MockConnectionPluginMockRecorder) NotifyConnectionChanged(changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyConnectionChanged", reflect.TypeOf((*MockConnectionPlugin)(nil).NotifyConnectionChanged), changes)
}

// NotifyHostListChanged mocks base method.
func (m *MockConnectionPlugin) NotifyHostListChanged(changes map[string]map[driver_infrastructure.HostChangeOptions]bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyHostListChanged", changes)
}

// NotifyHostListChanged indicates an expected call of NotifyHostListChanged.
func (mr *MockConnectionPluginMockRecorder) NotifyHostListChanged(changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHostListChanged", reflect.TypeOf((*MockConnectionPlugin)(nil).NotifyHostListChanged), changes)
}
