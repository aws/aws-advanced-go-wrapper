/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-advanced-go-wrapper/awssql/driver_infrastructure (interfaces: DriverDialect)

// Package mock_driver_infrastructure is a generated GoMock package.
package mock_driver_infrastructure

import (
	driver "database/sql/driver"
	reflect "reflect"

	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockDriverDialect is a mock of DriverDialect interface.
type MockDriverDialect struct {
	ctrl     *gomock.Controller
	recorder *MockDriverDialectMockRecorder
}

// MockDriverDialectMockRecorder is the mock recorder for MockDriverDialect.
type MockDriverDialectMockRecorder struct {
	mock *MockDriverDialect
}

// NewMockDriverDialect creates a new mock instance.
func NewMockDriverDialect(ctrl *gomock.Controller) *MockDriverDialect {
	mock := &MockDriverDialect{ctrl: ctrl}
	mock.recorder = &MockDriverDialectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverDialect) EXPECT() *MockDriverDialectMockRecorder {
	return m.recorder
}

// GetAllowedOnConnectionMethodNames mocks base method.
func (m *MockDriverDialect) GetAllowedOnConnectionMethodNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedOnConnectionMethodNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllowedOnConnectionMethodNames indicates an expected call of GetAllowedOnConnectionMethodNames.
func (mr *MockDriverDialectMockRecorder) GetAllowedOnConnectionMethodNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedOnConnectionMethodNames", reflect.TypeOf((*MockDriverDialect)(nil).GetAllowedOnConnectionMethodNames))
}

// GetDriverRegistrationName mocks base method.
func (m *MockDriverDialect) GetDriverRegistrationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverRegistrationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDriverRegistrationName indicates an expected call of GetDriverRegistrationName.
func (mr *MockDriverDialectMockRecorder) GetDriverRegistrationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverRegistrationName", reflect.TypeOf((*MockDriverDialect)(nil).GetDriverRegistrationName))
}

// IsClosed mocks base method.
func (m *MockDriverDialect) IsClosed(arg0 driver.Conn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockDriverDialectMockRecorder) IsClosed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockDriverDialect)(nil).IsClosed), arg0)
}

// IsDialect mocks base method.
func (m *MockDriverDialect) IsDialect(arg0 driver.Driver) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDialect", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDialect indicates an expected call of IsDialect.
func (mr *MockDriverDialectMockRecorder) IsDialect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDialect", reflect.TypeOf((*MockDriverDialect)(nil).IsDialect), arg0)
}

// IsDriverRegistered mocks base method.
func (m *MockDriverDialect) IsDriverRegistered(arg0 map[string]driver.Driver) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDriverRegistered", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDriverRegistered indicates an expected call of IsDriverRegistered.
func (mr *MockDriverDialectMockRecorder) IsDriverRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDriverRegistered", reflect.TypeOf((*MockDriverDialect)(nil).IsDriverRegistered), arg0)
}

// IsLoginError mocks base method.
func (m *MockDriverDialect) IsLoginError(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoginError indicates an expected call of IsLoginError.
func (mr *MockDriverDialectMockRecorder) IsLoginError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginError", reflect.TypeOf((*MockDriverDialect)(nil).IsLoginError), arg0)
}

// IsNetworkError mocks base method.
func (m *MockDriverDialect) IsNetworkError(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNetworkError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNetworkError indicates an expected call of IsNetworkError.
func (mr *MockDriverDialectMockRecorder) IsNetworkError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNetworkError", reflect.TypeOf((*MockDriverDialect)(nil).IsNetworkError), arg0)
}

// PrepareDsn mocks base method.
func (m *MockDriverDialect) PrepareDsn(arg0 map[string]string, arg1 *host_info_util.HostInfo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareDsn", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// PrepareDsn indicates an expected call of PrepareDsn.
func (mr *MockDriverDialectMockRecorder) PrepareDsn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareDsn", reflect.TypeOf((*MockDriverDialect)(nil).PrepareDsn), arg0, arg1)
}

// RegisterDriver mocks base method.
func (m *MockDriverDialect) RegisterDriver() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterDriver")
}

// RegisterDriver indicates an expected call of RegisterDriver.
func (mr *MockDriverDialectMockRecorder) RegisterDriver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDriver", reflect.TypeOf((*MockDriverDialect)(nil).RegisterDriver))
}
