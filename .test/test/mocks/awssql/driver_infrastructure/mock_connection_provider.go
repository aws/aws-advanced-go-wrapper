/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: awssql/driver_infrastructure/connection_provider.go

// Package mock_driver_infrastructure is a generated GoMock package.
package mock_driver_infrastructure

import (
	driver "database/sql/driver"
	reflect "reflect"

	driver_infrastructure "github.com/aws/aws-advanced-go-wrapper/awssql/driver_infrastructure"
	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionProvider is a mock of ConnectionProvider interface.
type MockConnectionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionProviderMockRecorder
	isgomock struct{}
}

// MockConnectionProviderMockRecorder is the mock recorder for MockConnectionProvider.
type MockConnectionProviderMockRecorder struct {
	mock *MockConnectionProvider
}

// NewMockConnectionProvider creates a new mock instance.
func NewMockConnectionProvider(ctrl *gomock.Controller) *MockConnectionProvider {
	mock := &MockConnectionProvider{ctrl: ctrl}
	mock.recorder = &MockConnectionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionProvider) EXPECT() *MockConnectionProviderMockRecorder {
	return m.recorder
}

// AcceptsStrategy mocks base method.
func (m *MockConnectionProvider) AcceptsStrategy(strategy string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptsStrategy", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptsStrategy indicates an expected call of AcceptsStrategy.
func (mr *MockConnectionProviderMockRecorder) AcceptsStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsStrategy", reflect.TypeOf((*MockConnectionProvider)(nil).AcceptsStrategy), strategy)
}

// AcceptsUrl mocks base method.
func (m *MockConnectionProvider) AcceptsUrl(hostInfo host_info_util.HostInfo, props map[string]string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptsUrl", hostInfo, props)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptsUrl indicates an expected call of AcceptsUrl.
func (mr *MockConnectionProviderMockRecorder) AcceptsUrl(hostInfo, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsUrl", reflect.TypeOf((*MockConnectionProvider)(nil).AcceptsUrl), hostInfo, props)
}

// Connect mocks base method.
func (m *MockConnectionProvider) Connect(hostInfo *host_info_util.HostInfo, props map[string]string, pluginService driver_infrastructure.PluginService) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", hostInfo, props, pluginService)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectionProviderMockRecorder) Connect(hostInfo, props, pluginService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionProvider)(nil).Connect), hostInfo, props, pluginService)
}

// GetHostInfoByStrategy mocks base method.
func (m *MockConnectionProvider) GetHostInfoByStrategy(hosts []*host_info_util.HostInfo, role host_info_util.HostRole, strategy string, props map[string]string) (*host_info_util.HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostInfoByStrategy", hosts, role, strategy, props)
	ret0, _ := ret[0].(*host_info_util.HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostInfoByStrategy indicates an expected call of GetHostInfoByStrategy.
func (mr *MockConnectionProviderMockRecorder) GetHostInfoByStrategy(hosts, role, strategy, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostInfoByStrategy", reflect.TypeOf((*MockConnectionProvider)(nil).GetHostInfoByStrategy), hosts, role, strategy, props)
}

// GetHostSelectorStrategy mocks base method.
func (m *MockConnectionProvider) GetHostSelectorStrategy(strategy string) (driver_infrastructure.HostSelector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSelectorStrategy", strategy)
	ret0, _ := ret[0].(driver_infrastructure.HostSelector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSelectorStrategy indicates an expected call of GetHostSelectorStrategy.
func (mr *MockConnectionProviderMockRecorder) GetHostSelectorStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSelectorStrategy", reflect.TypeOf((*MockConnectionProvider)(nil).GetHostSelectorStrategy), strategy)
}
