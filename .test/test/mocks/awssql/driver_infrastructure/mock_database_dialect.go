/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: awssql/driver_infrastructure/database_dialect.go

// Package mock_driver_infrastructure is a generated GoMock package.
package mock_driver_infrastructure

import (
	driver "database/sql/driver"
	reflect "reflect"

	driver_infrastructure "github.com/aws/aws-advanced-go-wrapper/awssql/driver_infrastructure"
	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseDialect is a mock of DatabaseDialect interface.
type MockDatabaseDialect struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseDialectMockRecorder
}

// MockDatabaseDialectMockRecorder is the mock recorder for MockDatabaseDialect.
type MockDatabaseDialectMockRecorder struct {
	mock *MockDatabaseDialect
}

// NewMockDatabaseDialect creates a new mock instance.
func NewMockDatabaseDialect(ctrl *gomock.Controller) *MockDatabaseDialect {
	mock := &MockDatabaseDialect{ctrl: ctrl}
	mock.recorder = &MockDatabaseDialectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseDialect) EXPECT() *MockDatabaseDialectMockRecorder {
	return m.recorder
}

// GetDefaultPort mocks base method.
func (m *MockDatabaseDialect) GetDefaultPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDefaultPort indicates an expected call of GetDefaultPort.
func (mr *MockDatabaseDialectMockRecorder) GetDefaultPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPort", reflect.TypeOf((*MockDatabaseDialect)(nil).GetDefaultPort))
}

// GetDialectUpdateCandidates mocks base method.
func (m *MockDatabaseDialect) GetDialectUpdateCandidates() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialectUpdateCandidates")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDialectUpdateCandidates indicates an expected call of GetDialectUpdateCandidates.
func (mr *MockDatabaseDialectMockRecorder) GetDialectUpdateCandidates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialectUpdateCandidates", reflect.TypeOf((*MockDatabaseDialect)(nil).GetDialectUpdateCandidates))
}

// GetHostAliasQuery mocks base method.
func (m *MockDatabaseDialect) GetHostAliasQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAliasQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostAliasQuery indicates an expected call of GetHostAliasQuery.
func (mr *MockDatabaseDialectMockRecorder) GetHostAliasQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAliasQuery", reflect.TypeOf((*MockDatabaseDialect)(nil).GetHostAliasQuery))
}

// GetHostListProvider mocks base method.
func (m *MockDatabaseDialect) GetHostListProvider(props map[string]string, initialDsn string, hostListProviderService driver_infrastructure.HostListProviderService, pluginService driver_infrastructure.PluginService) driver_infrastructure.HostListProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListProvider", props, initialDsn, hostListProviderService, pluginService)
	ret0, _ := ret[0].(driver_infrastructure.HostListProvider)
	return ret0
}

// GetHostListProvider indicates an expected call of GetHostListProvider.
func (mr *MockDatabaseDialectMockRecorder) GetHostListProvider(props, initialDsn, hostListProviderService, pluginService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListProvider", reflect.TypeOf((*MockDatabaseDialect)(nil).GetHostListProvider), props, initialDsn, hostListProviderService, pluginService)
}

// GetServerVersionQuery mocks base method.
func (m *MockDatabaseDialect) GetServerVersionQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersionQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerVersionQuery indicates an expected call of GetServerVersionQuery.
func (mr *MockDatabaseDialectMockRecorder) GetServerVersionQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersionQuery", reflect.TypeOf((*MockDatabaseDialect)(nil).GetServerVersionQuery))
}

// IsDialect mocks base method.
func (m *MockDatabaseDialect) IsDialect(conn driver.Conn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDialect", conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDialect indicates an expected call of IsDialect.
func (mr *MockDatabaseDialectMockRecorder) IsDialect(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDialect", reflect.TypeOf((*MockDatabaseDialect)(nil).IsDialect), conn)
}

// MockTopologyAwareDialect is a mock of TopologyAwareDialect interface.
type MockTopologyAwareDialect struct {
	ctrl     *gomock.Controller
	recorder *MockTopologyAwareDialectMockRecorder
}

// MockTopologyAwareDialectMockRecorder is the mock recorder for MockTopologyAwareDialect.
type MockTopologyAwareDialectMockRecorder struct {
	mock *MockTopologyAwareDialect
}

// NewMockTopologyAwareDialect creates a new mock instance.
func NewMockTopologyAwareDialect(ctrl *gomock.Controller) *MockTopologyAwareDialect {
	mock := &MockTopologyAwareDialect{ctrl: ctrl}
	mock.recorder = &MockTopologyAwareDialectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopologyAwareDialect) EXPECT() *MockTopologyAwareDialectMockRecorder {
	return m.recorder
}

// GetDefaultPort mocks base method.
func (m *MockTopologyAwareDialect) GetDefaultPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDefaultPort indicates an expected call of GetDefaultPort.
func (mr *MockTopologyAwareDialectMockRecorder) GetDefaultPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPort", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetDefaultPort))
}

// GetDialectUpdateCandidates mocks base method.
func (m *MockTopologyAwareDialect) GetDialectUpdateCandidates() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialectUpdateCandidates")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDialectUpdateCandidates indicates an expected call of GetDialectUpdateCandidates.
func (mr *MockTopologyAwareDialectMockRecorder) GetDialectUpdateCandidates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialectUpdateCandidates", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetDialectUpdateCandidates))
}

// GetHostAliasQuery mocks base method.
func (m *MockTopologyAwareDialect) GetHostAliasQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAliasQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostAliasQuery indicates an expected call of GetHostAliasQuery.
func (mr *MockTopologyAwareDialectMockRecorder) GetHostAliasQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAliasQuery", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetHostAliasQuery))
}

// GetHostListProvider mocks base method.
func (m *MockTopologyAwareDialect) GetHostListProvider(props map[string]string, initialDsn string, hostListProviderService driver_infrastructure.HostListProviderService, pluginService driver_infrastructure.PluginService) driver_infrastructure.HostListProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListProvider", props, initialDsn, hostListProviderService, pluginService)
	ret0, _ := ret[0].(driver_infrastructure.HostListProvider)
	return ret0
}

// GetHostListProvider indicates an expected call of GetHostListProvider.
func (mr *MockTopologyAwareDialectMockRecorder) GetHostListProvider(props, initialDsn, hostListProviderService, pluginService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListProvider", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetHostListProvider), props, initialDsn, hostListProviderService, pluginService)
}

// GetHostName mocks base method.
func (m *MockTopologyAwareDialect) GetHostName(conn driver.Conn) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostName", conn)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostName indicates an expected call of GetHostName.
func (mr *MockTopologyAwareDialectMockRecorder) GetHostName(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostName", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetHostName), conn)
}

// GetHostRole mocks base method.
func (m *MockTopologyAwareDialect) GetHostRole(conn driver.Conn) host_info_util.HostRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRole", conn)
	ret0, _ := ret[0].(host_info_util.HostRole)
	return ret0
}

// GetHostRole indicates an expected call of GetHostRole.
func (mr *MockTopologyAwareDialectMockRecorder) GetHostRole(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRole", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetHostRole), conn)
}

// GetServerVersionQuery mocks base method.
func (m *MockTopologyAwareDialect) GetServerVersionQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersionQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerVersionQuery indicates an expected call of GetServerVersionQuery.
func (mr *MockTopologyAwareDialectMockRecorder) GetServerVersionQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersionQuery", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetServerVersionQuery))
}

// GetTopology mocks base method.
func (m *MockTopologyAwareDialect) GetTopology(conn driver.Conn, provider driver_infrastructure.HostListProvider) ([]*host_info_util.HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopology", conn, provider)
	ret0, _ := ret[0].([]*host_info_util.HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopology indicates an expected call of GetTopology.
func (mr *MockTopologyAwareDialectMockRecorder) GetTopology(conn, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopology", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetTopology), conn, provider)
}

// GetWriterHostName mocks base method.
func (m *MockTopologyAwareDialect) GetWriterHostName(conn driver.Conn) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriterHostName", conn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriterHostName indicates an expected call of GetWriterHostName.
func (mr *MockTopologyAwareDialectMockRecorder) GetWriterHostName(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriterHostName", reflect.TypeOf((*MockTopologyAwareDialect)(nil).GetWriterHostName), conn)
}

// IsDialect mocks base method.
func (m *MockTopologyAwareDialect) IsDialect(conn driver.Conn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDialect", conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDialect indicates an expected call of IsDialect.
func (mr *MockTopologyAwareDialectMockRecorder) IsDialect(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDialect", reflect.TypeOf((*MockTopologyAwareDialect)(nil).IsDialect), conn)
}

// MockAuroraLimitlessDialect is a mock of AuroraLimitlessDialect interface.
type MockAuroraLimitlessDialect struct {
	ctrl     *gomock.Controller
	recorder *MockAuroraLimitlessDialectMockRecorder
}

// MockAuroraLimitlessDialectMockRecorder is the mock recorder for MockAuroraLimitlessDialect.
type MockAuroraLimitlessDialectMockRecorder struct {
	mock *MockAuroraLimitlessDialect
}

// NewMockAuroraLimitlessDialect creates a new mock instance.
func NewMockAuroraLimitlessDialect(ctrl *gomock.Controller) *MockAuroraLimitlessDialect {
	mock := &MockAuroraLimitlessDialect{ctrl: ctrl}
	mock.recorder = &MockAuroraLimitlessDialectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuroraLimitlessDialect) EXPECT() *MockAuroraLimitlessDialectMockRecorder {
	return m.recorder
}

// GetDefaultPort mocks base method.
func (m *MockAuroraLimitlessDialect) GetDefaultPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDefaultPort indicates an expected call of GetDefaultPort.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetDefaultPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPort", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetDefaultPort))
}

// GetDialectUpdateCandidates mocks base method.
func (m *MockAuroraLimitlessDialect) GetDialectUpdateCandidates() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialectUpdateCandidates")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDialectUpdateCandidates indicates an expected call of GetDialectUpdateCandidates.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetDialectUpdateCandidates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialectUpdateCandidates", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetDialectUpdateCandidates))
}

// GetHostAliasQuery mocks base method.
func (m *MockAuroraLimitlessDialect) GetHostAliasQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAliasQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostAliasQuery indicates an expected call of GetHostAliasQuery.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetHostAliasQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAliasQuery", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetHostAliasQuery))
}

// GetHostListProvider mocks base method.
func (m *MockAuroraLimitlessDialect) GetHostListProvider(props map[string]string, initialDsn string, hostListProviderService driver_infrastructure.HostListProviderService, pluginService driver_infrastructure.PluginService) driver_infrastructure.HostListProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListProvider", props, initialDsn, hostListProviderService, pluginService)
	ret0, _ := ret[0].(driver_infrastructure.HostListProvider)
	return ret0
}

// GetHostListProvider indicates an expected call of GetHostListProvider.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetHostListProvider(props, initialDsn, hostListProviderService, pluginService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListProvider", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetHostListProvider), props, initialDsn, hostListProviderService, pluginService)
}

// GetLimitlessRouterEndpointQuery mocks base method.
func (m *MockAuroraLimitlessDialect) GetLimitlessRouterEndpointQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitlessRouterEndpointQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLimitlessRouterEndpointQuery indicates an expected call of GetLimitlessRouterEndpointQuery.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetLimitlessRouterEndpointQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitlessRouterEndpointQuery", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetLimitlessRouterEndpointQuery))
}

// GetServerVersionQuery mocks base method.
func (m *MockAuroraLimitlessDialect) GetServerVersionQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersionQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerVersionQuery indicates an expected call of GetServerVersionQuery.
func (mr *MockAuroraLimitlessDialectMockRecorder) GetServerVersionQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersionQuery", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).GetServerVersionQuery))
}

// IsDialect mocks base method.
func (m *MockAuroraLimitlessDialect) IsDialect(conn driver.Conn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDialect", conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDialect indicates an expected call of IsDialect.
func (mr *MockAuroraLimitlessDialectMockRecorder) IsDialect(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDialect", reflect.TypeOf((*MockAuroraLimitlessDialect)(nil).IsDialect), conn)
}
