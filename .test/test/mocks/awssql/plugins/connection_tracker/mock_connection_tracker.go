/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: awssql/plugins/connection_tracker/connection_tracker.go

// Package mock_connection_tracker is a generated GoMock package.
package mock_connection_tracker

import (
	driver "database/sql/driver"
	reflect "reflect"

	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionTracker is a mock of ConnectionTracker interface.
type MockConnectionTracker struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionTrackerMockRecorder
}

// MockConnectionTrackerMockRecorder is the mock recorder for MockConnectionTracker.
type MockConnectionTrackerMockRecorder struct {
	mock *MockConnectionTracker
}

// NewMockConnectionTracker creates a new mock instance.
func NewMockConnectionTracker(ctrl *gomock.Controller) *MockConnectionTracker {
	mock := &MockConnectionTracker{ctrl: ctrl}
	mock.recorder = &MockConnectionTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionTracker) EXPECT() *MockConnectionTrackerMockRecorder {
	return m.recorder
}

// ClearCache mocks base method.
func (m *MockConnectionTracker) ClearCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCache")
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockConnectionTrackerMockRecorder) ClearCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockConnectionTracker)(nil).ClearCache))
}

// InvalidateAllConnections mocks base method.
func (m *MockConnectionTracker) InvalidateAllConnections(hostInfo *host_info_util.HostInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateAllConnections", hostInfo)
}

// InvalidateAllConnections indicates an expected call of InvalidateAllConnections.
func (mr *MockConnectionTrackerMockRecorder) InvalidateAllConnections(hostInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAllConnections", reflect.TypeOf((*MockConnectionTracker)(nil).InvalidateAllConnections), hostInfo)
}

// InvalidateAllConnectionsMultipleHosts mocks base method.
func (m *MockConnectionTracker) InvalidateAllConnectionsMultipleHosts(hosts ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hosts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InvalidateAllConnectionsMultipleHosts", varargs...)
}

// InvalidateAllConnectionsMultipleHosts indicates an expected call of InvalidateAllConnectionsMultipleHosts.
func (mr *MockConnectionTrackerMockRecorder) InvalidateAllConnectionsMultipleHosts(hosts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAllConnectionsMultipleHosts", reflect.TypeOf((*MockConnectionTracker)(nil).InvalidateAllConnectionsMultipleHosts), hosts...)
}

// LogOpenedConnections mocks base method.
func (m *MockConnectionTracker) LogOpenedConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogOpenedConnections")
}

// LogOpenedConnections indicates an expected call of LogOpenedConnections.
func (mr *MockConnectionTrackerMockRecorder) LogOpenedConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOpenedConnections", reflect.TypeOf((*MockConnectionTracker)(nil).LogOpenedConnections))
}

// PopulateOpenedConnectionQueue mocks base method.
func (m *MockConnectionTracker) PopulateOpenedConnectionQueue(hostInfo *host_info_util.HostInfo, conn driver.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PopulateOpenedConnectionQueue", hostInfo, conn)
}

// PopulateOpenedConnectionQueue indicates an expected call of PopulateOpenedConnectionQueue.
func (mr *MockConnectionTrackerMockRecorder) PopulateOpenedConnectionQueue(hostInfo, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateOpenedConnectionQueue", reflect.TypeOf((*MockConnectionTracker)(nil).PopulateOpenedConnectionQueue), hostInfo, conn)
}

// PruneNullConnections mocks base method.
func (m *MockConnectionTracker) PruneNullConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PruneNullConnections")
}

// PruneNullConnections indicates an expected call of PruneNullConnections.
func (mr *MockConnectionTrackerMockRecorder) PruneNullConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneNullConnections", reflect.TypeOf((*MockConnectionTracker)(nil).PruneNullConnections))
}
