/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: awssql/plugins/error_simulator/error_simulator_method_callback.go

// Package mock_error_simulator is a generated GoMock package.
package mock_error_simulator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrorSimulatorMethodCallback is a mock of ErrorSimulatorMethodCallback interface.
type MockErrorSimulatorMethodCallback struct {
	ctrl     *gomock.Controller
	recorder *MockErrorSimulatorMethodCallbackMockRecorder
}

// MockErrorSimulatorMethodCallbackMockRecorder is the mock recorder for MockErrorSimulatorMethodCallback.
type MockErrorSimulatorMethodCallbackMockRecorder struct {
	mock *MockErrorSimulatorMethodCallback
}

// NewMockErrorSimulatorMethodCallback creates a new mock instance.
func NewMockErrorSimulatorMethodCallback(ctrl *gomock.Controller) *MockErrorSimulatorMethodCallback {
	mock := &MockErrorSimulatorMethodCallback{ctrl: ctrl}
	mock.recorder = &MockErrorSimulatorMethodCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorSimulatorMethodCallback) EXPECT() *MockErrorSimulatorMethodCallbackMockRecorder {
	return m.recorder
}

// GetErrorToRaise mocks base method.
func (m *MockErrorSimulatorMethodCallback) GetErrorToRaise(methodName string, methodArgs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{methodName}
	for _, a := range methodArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetErrorToRaise", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetErrorToRaise indicates an expected call of GetErrorToRaise.
func (mr *MockErrorSimulatorMethodCallbackMockRecorder) GetErrorToRaise(methodName interface{}, methodArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{methodName}, methodArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorToRaise", reflect.TypeOf((*MockErrorSimulatorMethodCallback)(nil).GetErrorToRaise), varargs...)
}
