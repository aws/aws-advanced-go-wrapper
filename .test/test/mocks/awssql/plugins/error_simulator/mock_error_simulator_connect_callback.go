// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/error_simulator/error_simulator_connect_callback.go

// Package mocks is a generated GoMock package.
package mock_error_simulator

import (
	reflect "reflect"

	host_info_util "github.com/aws/aws-advanced-go-wrapper/awssql/host_info_util"
	gomock "github.com/golang/mock/gomock"
)

// MockErrorSimulatorConnectCallback is a mock of ErrorSimulatorConnectCallback interface.
type MockErrorSimulatorConnectCallback struct {
	ctrl     *gomock.Controller
	recorder *MockErrorSimulatorConnectCallbackMockRecorder
}

// MockErrorSimulatorConnectCallbackMockRecorder is the mock recorder for MockErrorSimulatorConnectCallback.
type MockErrorSimulatorConnectCallbackMockRecorder struct {
	mock *MockErrorSimulatorConnectCallback
}

// NewMockErrorSimulatorConnectCallback creates a new mock instance.
func NewMockErrorSimulatorConnectCallback(ctrl *gomock.Controller) *MockErrorSimulatorConnectCallback {
	mock := &MockErrorSimulatorConnectCallback{ctrl: ctrl}
	mock.recorder = &MockErrorSimulatorConnectCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorSimulatorConnectCallback) EXPECT() *MockErrorSimulatorConnectCallbackMockRecorder {
	return m.recorder
}

// GetErrorToRaise mocks base method.
func (m *MockErrorSimulatorConnectCallback) GetErrorToRaise(hostInfo *host_info_util.HostInfo, props map[string]string, isInitialConnection bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorToRaise", hostInfo, props, isInitialConnection)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetErrorToRaise indicates an expected call of GetErrorToRaise.
func (mr *MockErrorSimulatorConnectCallbackMockRecorder) GetErrorToRaise(hostInfo, props, isInitialConnection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorToRaise", reflect.TypeOf((*MockErrorSimulatorConnectCallback)(nil).GetErrorToRaise), hostInfo, props, isInitialConnection)
}
