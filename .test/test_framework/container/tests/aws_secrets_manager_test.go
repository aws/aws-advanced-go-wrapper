/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

package test

import (
	"context"
	"errors"
	"fmt"
	"github.com/aws/aws-advanced-go-wrapper/.test/test_framework/container/test_utils"
	_ "github.com/aws/aws-advanced-go-wrapper/aws-secrets-manager"
	"github.com/aws/aws-advanced-go-wrapper/awssql/error_util"
	"github.com/aws/aws-advanced-go-wrapper/awssql/property_util"
	_ "github.com/aws/aws-advanced-go-wrapper/otlp"
	_ "github.com/aws/aws-advanced-go-wrapper/xray"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func CreateSecret(t *testing.T, client *secretsmanager.Client, env *test_utils.TestEnvironment, secretName string) string {
	var engine string
	if env.Info().Request.Engine == test_utils.PG {
		engine = "postgres"
	} else if env.Info().Request.Engine == test_utils.MYSQL {
		engine = "mysql"
	}

	secretString := fmt.Sprintf(
		`{"engine":"%s","dbname":"%s","host":"%s","username":"%s","password":"%s","description":"Test secret generated by integration tests."}`,
		engine,
		env.Info().DatabaseInfo.DefaultDbName,
		env.Info().DatabaseInfo.ClusterEndpoint,
		env.Info().DatabaseInfo.Username,
		env.Info().DatabaseInfo.Password)

	createSecretInput := &secretsmanager.CreateSecretInput{
		Name:         aws.String(secretName),
		SecretString: aws.String(secretString),
	}
	createSecretOutput, err := client.CreateSecret(context.TODO(), createSecretInput)
	if err != nil {
		t.Fatalf("Failed to create secret: '%v'.", err)
	}
	return *createSecretOutput.ARN
}

func DeleteSecret(t *testing.T, client *secretsmanager.Client, env *test_utils.TestEnvironment, secretName string) {
	deleteSecretInput := &secretsmanager.DeleteSecretInput{
		SecretId:                   aws.String(secretName),
		ForceDeleteWithoutRecovery: aws.Bool(true),
	}
	_, err := client.DeleteSecret(context.TODO(), deleteSecretInput)
	if err != nil {
		t.Fatalf("Failed to delete secret: '%v'.", err)
	}
}

func TestSecretsManager(t *testing.T) {
	env, err := test_utils.GetCurrentTestEnvironment()
	if env == nil || err != nil {
		t.Fail()
	}

	cfg, _ := config.LoadDefaultConfig(context.TODO())
	client := secretsmanager.NewFromConfig(cfg, func(o *secretsmanager.Options) {
		o.Region = env.Info().Region
	})
	secretName := fmt.Sprintf("TestSecret-%s", uuid.New().String())
	secretARN := CreateSecret(t, client, env, secretName)
	defer DeleteSecret(t, client, env, secretName)

	t.Run("Connection", func(t *testing.T) {
		connectionTest(t, env, secretName)
	})

	t.Run("ConnectionWithTelemetryOtel", func(t *testing.T) {
		connectionTestWithTelemetryOtel(t, env, secretName)
	})

	t.Run("ConnectionWithTelemetryXray", func(t *testing.T) {
		connectionTestWithTelemetryXray(t, env, secretName)
	})

	t.Run("ConnectWithARN", func(t *testing.T) {
		connectWithARNTest(t, env, secretARN)
	})

	t.Run("IncorrectSecretId", func(t *testing.T) {
		incorrectSecretIdTest(t, env)
	})

	t.Run("MissingSecretId", func(t *testing.T) {
		missingSecretIdTest(t, env)
	})

	t.Run("InvalidRegion", func(t *testing.T) {
		invalidRegionTest(t, env, secretName)
	})

	t.Run("MissingRegion", func(t *testing.T) {
		missingRegionTest(t, env, secretName)
	})

	t.Run("IncorrectRegion", func(t *testing.T) {
		incorrectRegionTest(t, env, secretName)
	})
}

func connectionTest(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": secretName,
		"secretsManagerRegion":   env.Info().Region,
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Nil(t, pingErr)
}

func connectionTestWithTelemetryOtel(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	bsp, err := test_utils.SetupTelemetry(env)
	assert.Nil(t, err)
	assert.NotNil(t, bsp)
	defer func() { _ = bsp.Shutdown(context.TODO()) }()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                 "awsSecretsManager",
		"user":                    "incorrectUser",
		"password":                "incorrectPassword",
		"secretsManagerSecretId":  secretName,
		"secretsManagerRegion":    env.Info().Region,
		"enableTelemetry":         "true",
		"telemetryTracesBackend":  "OTLP",
		"telemetryMetricsBackend": "OTLP",
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Nil(t, pingErr)
}

func connectionTestWithTelemetryXray(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	bsp, err := test_utils.SetupTelemetry(env)
	assert.Nil(t, err)
	assert.NotNil(t, bsp)
	defer func() { _ = bsp.Shutdown(context.TODO()) }()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                 "awsSecretsManager",
		"user":                    "incorrectUser",
		"password":                "incorrectPassword",
		"secretsManagerSecretId":  secretName,
		"secretsManagerRegion":    env.Info().Region,
		"enableTelemetry":         "true",
		"telemetryTracesBackend":  "XRAY",
		"telemetryMetricsBackend": "OTLP",
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Nil(t, pingErr)
}

func connectWithARNTest(t *testing.T, env *test_utils.TestEnvironment, secretARN string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": secretARN,
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Nil(t, pingErr)
}

func incorrectSecretIdTest(t *testing.T, env *test_utils.TestEnvironment) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": "incorrectSecretId",
		"secretsManagerRegion":   env.Info().Region,
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.NotNil(t, pingErr)
}

func missingSecretIdTest(t *testing.T, env *test_utils.TestEnvironment) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":              "awsSecretsManager",
		"user":                 "incorrectUser",
		"password":             "incorrectPassword",
		"secretsManagerRegion": env.Info().Region,
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.NotNil(t, pingErr)
}

func invalidRegionTest(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": secretName,
		"secretsManagerRegion":   "invalidRegion",
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Equal(
		t,
		errors.New(error_util.GetMessage("AwsSecretsManagerConnectionPlugin.unableToDetermineRegion", property_util.SECRETS_MANAGER_REGION.Name)),
		pingErr)
}

func missingRegionTest(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": secretName,
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.Equal(
		t,
		errors.New(error_util.GetMessage("AwsSecretsManagerConnectionPlugin.unableToDetermineRegion", property_util.SECRETS_MANAGER_REGION.Name)),
		pingErr)
}

func incorrectRegionTest(t *testing.T, env *test_utils.TestEnvironment, secretName string) {
	defer test_utils.BasicCleanupAfterBasicSetup(t)()
	environment, err := test_utils.GetCurrentTestEnvironment()
	assert.Nil(t, err)

	dsn := test_utils.GetDsn(env, map[string]string{
		"plugins":                "awsSecretsManager",
		"user":                   "incorrectUser",
		"password":               "incorrectPassword",
		"secretsManagerSecretId": secretName,
		"secretsManagerRegion":   "ca-central-1",
	})
	db, err := test_utils.OpenDb(environment.Info().Request.Engine, dsn)
	assert.Nil(t, err)
	assert.NotNil(t, db)
	defer db.Close()

	pingErr := db.Ping()
	assert.NotNil(t, pingErr)
}
