name: Build, Unit Tests, and Linting

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

permissions:
  contents: read

jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          folder-path: 'docs'
  get-list-of-go-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-go-modules.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Find Go modules
        id: find-go-modules
        run: |
          modules=$(find . -type f -name 'go.mod' -exec dirname {} \; | while read dir; do
            if [ -f "$dir/go.sum" ]; then
              echo "\"${dir#./}\""
            fi
          done | jq -cs .)
          echo "matrix={\"modules\":$modules}" 
          echo "matrix={\"modules\":$modules}" >> $GITHUB_OUTPUT
  linting:
    needs: get-list-of-go-modules
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.get-list-of-go-modules.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v4
      - name: 'Run golangci-lint - linting'
        uses: golangci/golangci-lint-action@v6
        with:
          working-directory: ${{ matrix.modules }}
          version: v1.64.8
          args: --timeout=5m
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v4
      - name: Generate coverpkg list
        id: coverpkgs
        run: |
          coverpkgs=$(find . -name go.mod -not -path "*/.*/*" -exec dirname {} \; |
            grep -v '^./\.test$' |
            while read moddir; do
              go list -f '{{.ImportPath}} {{.Name}}' "$moddir/..." 2>/dev/null |
              awk '$2 != "_test" { print $1 }'
            done | paste -sd, -)
          
          echo "coverpkg=$coverpkgs"
          echo "coverpkg=$coverpkgs" >> $GITHUB_ENV
  
      - name: 'Test with Go'
        working-directory: ${{ github.workspace }}/.test
        run: |
          go test ./test/... -coverpkg=$coverpkg -coverprofile=coverage.out -json > TestResults.json

      - name: Check test coverage threshold
        working-directory: ${{ github.workspace }}/.test
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total Coverage: $coverage%"
          threshold=66.0
          result=$(echo "$coverage >= $threshold" | bc)
          if [ "$result" -ne 1 ]; then
            echo "Coverage $coverage% is below threshold of $threshold%"
            exit 1
          else
            echo "Coverage $coverage% meets the threshold of $threshold%"
          fi

      - name: 'Upload Go test results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Go-results
          path: ${{ github.workspace }}/.test/TestResults.json
          retention-days: 5

